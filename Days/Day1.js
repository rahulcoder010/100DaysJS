"// Day1.js\n\n/**\n * This function takes a nested array and returns a flattened array.\n * @param {Array} arr - The nested array to be flattened.\n * @returns {Array} - The flattened array or an error message if the input is not an array.\n */\nfunction flatArray(arr) {\n    // Check if the input is an array\n    if (!Array.isArray(arr)) {\n        return 'Error: Input should be an array';\n    }\n\n    // Use the Array.prototype.reduce() method to iterate over the array and concatenate each element to the result array.\n    // Use the Array.prototype.concat() method to concatenate each element (which may be an array) to the result array.\n    // Use the Array.isArray() method to check if an element is an array.\n    return arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatArray(val)) : acc.concat(val), []);\n}\n\n// Test cases\nconsole.log(flatArray([1, 2, [3, 4, [5, 6]]])); // Output: [1, 2, 3, 4, 5, 6]\nconsole.log(flatArray([1, [2, [3, [4, [5]]]]])); // Output: [1, 2, 3, 4, 5]\nconsole.log(flatArray([[1, 2, 3], 4, 5])); // Output: [1, 2, 3, 4, 5]\nconsole.log(flatArray('Not an array')); // Output: 'Error: Input should be an array'\nconsole.log(flatArray([])); // Output: []\nconsole.log(flatArray([1, 2, 3])); // Output: [1, 2, 3]\nconsole.log(flatArray([1, 'a', [3, 'b', ['c']]])); // Output: [1, 'a', 3, 'b', 'c']"